import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
import openml
import os
import mlflow
import plotly.express as px
import shutil
import time
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from mlflow.tracking import MlflowClient
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import calinski_harabasz_score, davies_bouldin_score
from sklearn.datasets import make_blobs
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split 



def ly_thuyet_PCA(): 

    st.title("Matrix Factorization")

    st.markdown(
        """
        **Matrix Factorization** l√† ph∆∞∆°ng ph√°p ph√¢n r√£ ma tr·∫≠n ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng v√† gi·∫£m chi·ªÅu d·ªØ li·ªáu.
        C√°c ph∆∞∆°ng ph√°p ph·ªï bi·∫øn g·ªìm:
        - **Principal Component Analysis (PCA)**: Gi·∫£m chi·ªÅu b·∫±ng c√°ch t√¨m tr·ª•c ch√≠nh.
        - **Singular Value Decomposition (SVD)**: Ph√¢n r√£ ma tr·∫≠n th√†nh ba ma tr·∫≠n con.
        - **Non-Negative Matrix Factorization (NMF)**: X·∫•p x·ªâ ma tr·∫≠n v·ªõi c√°c gi√° tr·ªã kh√¥ng √¢m.
        """
    )

    # Ti√™u ƒë·ªÅ ph·ª•
    st.header("üî¢ Kh√°i ni·ªám PCA")
    st.write("üìâ PCA (Principal Component Analysis ‚Äì Ph√¢n t√≠ch th√†nh ph·∫ßn ch√≠nh) l√† m·ªôt k·ªπ thu·∫≠t gi·∫£m chi·ªÅu d·ªØ li·ªáu b·∫±ng c√°ch t√¨m c√°c h∆∞·ªõng (th√†nh ph·∫ßn ch√≠nh) c√≥ ph∆∞∆°ng sai l·ªõn nh·∫•t trong d·ªØ li·ªáu.")

    st.markdown(
        """
        <div style="text-align: center;">
            <img src="https://machinelearningcoban.com/assets/27_pca/pca_var0.png" width="300">
            <p><em>Matrix Factorization</em></p>
        </div>
        """, 
        unsafe_allow_html=True
    )

    st.header("üìå √ù t∆∞·ªüng c·ªßa PCA")

    st.markdown(
        """
        ### 1Ô∏è‚É£ Lo·∫°i b·ªè th√†nh ph·∫ßn c√≥ ph∆∞∆°ng sai nh·ªè  
        - PCA t√¨m c√°c h∆∞·ªõng c√≥ **ph∆∞∆°ng sai l·ªõn nh·∫•t** ƒë·ªÉ gi·ªØ l·∫°i.  
        - C√°c h∆∞·ªõng c√≥ ph∆∞∆°ng sai nh·ªè b·ªã lo·∫°i b·ªè v√¨ ch√∫ng kh√¥ng ƒë√≥ng g√≥p nhi·ªÅu v√†o s·ª± thay ƒë·ªïi c·ªßa d·ªØ li·ªáu.  
        
        <div style="text-align: center;">
            <img src="https://machinelearningcoban.com/assets/27_pca/pca_diagvar.png" width="50%">
        </div>

        ### 2Ô∏è‚É£ Xoay d·ªØ li·ªáu theo tr·ª•c ch√≠nh  
        - PCA t√¨m m·ªôt h·ªá tr·ª•c t·ªça ƒë·ªô m·ªõi sao cho d·ªØ li·ªáu ƒë∆∞·ª£c tr·∫£i d√†i theo c√°c tr·ª•c c√≥ ph∆∞∆°ng sai l·ªõn.  
        - ƒêi·ªÅu n√†y gi√∫p gi·∫£m chi·ªÅu d·ªØ li·ªáu m√† v·∫´n gi·ªØ l·∫°i nhi·ªÅu th√¥ng tin quan tr·ªçng.  

        <div style="text-align: center;">
            <img src="https://setosa.io/ev/principal-component-analysis/fb-thumb.png" width="50%">
        </div>
        """,
        unsafe_allow_html=True
    )

    st.header("üìå C√¥ng th·ª©c PCA")
    st.write("üìä PCA s·ª≠ d·ª•ng gi√° tr·ªã k·ª≥ v·ªçng, ph∆∞∆°ng sai, ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai v√† ph√¢n r√£ gi√° tr·ªã k·ª≥ d·ªã (SVD - Singular Value Decomposition) ƒë·ªÉ t√¨m c√°c th√†nh ph·∫ßn ch√≠nh.")

    st.subheader("üßÆ B∆∞·ªõc 1: Chu·∫©n h√≥a d·ªØ li·ªáu")
    st.latex(r"""
    X = \begin{bmatrix}
    x_{11} & x_{12} & \dots & x_{1d} \\
    x_{21} & x_{22} & \dots & x_{2d} \\
    \vdots & \vdots & \ddots & \vdots \\
    x_{n1} & x_{n2} & \dots & x_{nd}
    \end{bmatrix}
    """)
    st.write("üìè Tr·ª´ ƒëi gi√° tr·ªã trung b√¨nh c·ªßa t·ª´ng ƒë·∫∑c tr∆∞ng ƒë·ªÉ ƒë∆∞a d·ªØ li·ªáu v·ªÅ trung t√¢m g·ªëc t·ªça ƒë·ªô:")
    st.latex(r"""
    \bar{x}_j = \frac{1}{n} \sum_{i=1}^{n} x_{ij}
    """)
    st.latex(r"""
    X' = X - \bar{X}
    """)

    st.subheader("üìê B∆∞·ªõc 2: T√≠nh ma tr·∫≠n hi·ªáp ph∆∞∆°ng sai")
    st.latex(r"""
    C = \frac{1}{n-1} X'^T X'
    """)
    st.write("üîó C l√† ma tr·∫≠n d √ó d, bi·ªÉu di·ªÖn m·ªëi quan h·ªá tuy·∫øn t√≠nh gi·ªØa c√°c ƒë·∫∑c tr∆∞ng.")

    st.subheader("üß© B∆∞·ªõc 3: T√≠nh to√°n vector ri√™ng v√† gi√° tr·ªã ri√™ng")
    st.latex(r"""
    C v = \lambda v
    """)
    st.write("üìå Trong ƒë√≥:")
    st.write("- üîπ v l√† vector ri√™ng (eigenvector) (h∆∞·ªõng ch√≠nh c·ªßa d·ªØ li·ªáu).")
    st.write("- üî∏ Œª l√† gi√° tr·ªã ri√™ng (eigenvalue) (l∆∞·ª£ng ph∆∞∆°ng sai gi·ªØ l·∫°i tr√™n h∆∞·ªõng ƒë√≥).")
    st.write("üìå Ch·ªçn k vector ri√™ng t∆∞∆°ng ·ª©ng v·ªõi k gi√° tr·ªã ri√™ng l·ªõn nh·∫•t.")

    st.subheader("üîÄ B∆∞·ªõc 4: Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang kh√¥ng gian m·ªõi")
    st.latex(r"""
    Z = X' W
    """)
    st.write("üìÇ Ma tr·∫≠n c√°c th√†nh ph·∫ßn ch√≠nh W ch·ª©a c√°c vector ri√™ng t∆∞∆°ng ·ª©ng v·ªõi k gi√° tr·ªã ri√™ng l·ªõn nh·∫•t.")
    st.write("üìâ Ma tr·∫≠n Z l√† d·ªØ li·ªáu m·ªõi sau khi gi·∫£m chi·ªÅu.") 



    # Th√™m ph·∫ßn ∆∞u ƒëi·ªÉm v√† nh∆∞·ª£c ƒëi·ªÉm c·ªßa PCA
    st.header("‚úÖ ∆Øu ƒëi·ªÉm & ‚ùå Nh∆∞·ª£c ƒëi·ªÉm c·ªßa PCA")

    st.subheader("‚úÖ ∆Øu ƒëi·ªÉm:")
    st.write("- üìä Gi·∫£m chi·ªÅu d·ªØ li·ªáu, gi√∫p tƒÉng t·ªëc ƒë·ªô hu·∫•n luy·ªán m√¥ h√¨nh.")
    st.write("- üéØ Lo·∫°i b·ªè nhi·ªÖu trong d·ªØ li·ªáu, gi√∫p m√¥ h√¨nh ch√≠nh x√°c h∆°n.")
    st.write("- üîÑ Gi√∫p tr·ª±c quan h√≥a d·ªØ li·ªáu t·ªët h∆°n b·∫±ng c√°ch gi·∫£m xu·ªëng 2D ho·∫∑c 3D.")

    st.subheader("‚ùå Nh∆∞·ª£c ƒëi·ªÉm:")
    st.write("- üîç M·∫•t m·ªôt ph·∫ßn th√¥ng tin khi gi·∫£m chi·ªÅu, c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn hi·ªáu su·∫•t m√¥ h√¨nh.")
    st.write("- üè∑Ô∏è PCA kh√¥ng b·∫£o to√†n t√≠nh di·ªÖn gi·∫£i c·ªßa d·ªØ li·ªáu, do c√°c th√†nh ph·∫ßn ch√≠nh kh√¥ng t∆∞∆°ng ·ª©ng v·ªõi ƒë·∫∑c tr∆∞ng ban ƒë·∫ßu.")
    st.write("- üßÆ Gi·∫£ ƒë·ªãnh r·∫±ng d·ªØ li·ªáu c√≥ quan h·ªá tuy·∫øn t√≠nh, kh√¥ng ph√π h·ª£p v·ªõi d·ªØ li·ªáu phi tuy·∫øn.")  
    

    st.markdown("## üìâ Minh h·ªça thu g·ªçn chi·ªÅu b·∫±ng PCA")
    # Tham s·ªë ƒëi·ªÅu ch·ªânh v·ªõi tooltip
    num_samples = st.slider("S·ªë ƒëi·ªÉm d·ªØ li·ªáu üü¢", 100, 1000, 300, step=50, help="S·ªë l∆∞·ª£ng ƒëi·ªÉm d·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ th·ª±c hi·ªán ph√¢n t√≠ch PCA. Gi√° tr·ªã c√†ng l·ªõn, d·ªØ li·ªáu c√†ng phong ph√∫ nh∆∞ng c≈©ng c√≥ th·ªÉ l√†m tƒÉng th·ªùi gian x·ª≠ l√Ω.")
    num_features = st.slider("S·ªë chi·ªÅu ban ƒë·∫ßu üîµ", 3, 10, 3, help="S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng (features) ban ƒë·∫ßu c·ªßa d·ªØ li·ªáu. PCA s·∫Ω gi√∫p gi·∫£m s·ªë chi·ªÅu n√†y trong khi v·∫´n gi·ªØ l·∫°i t·ªëi ƒëa th√¥ng tin quan tr·ªçng.")
    num_clusters = st.slider("S·ªë c·ª•m üî¥", 2, 5, 3, help="S·ªë l∆∞·ª£ng nh√≥m (clusters) trong d·ªØ li·ªáu. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o th√†nh c√°c c·ª•m tr∆∞·ªõc khi √°p d·ª•ng PCA.")

    # Gi·ªõi h·∫°n s·ªë th√†nh ph·∫ßn PCA h·ª£p l·ªá
    max_components = max(2, num_features)
    n_components = st.slider("S·ªë th√†nh ph·∫ßn PCA üü£", 2, max_components, min(2, max_components), help="S·ªë th√†nh ph·∫ßn ch√≠nh sau khi gi·∫£m chi·ªÅu d·ªØ li·ªáu b·∫±ng PCA. Gi√° tr·ªã nh·ªè h∆°n s·ªë chi·ªÅu ban ƒë·∫ßu nh∆∞ng v·∫´n gi·ªØ l·∫°i ph·∫ßn l·ªõn th√¥ng tin quan tr·ªçng.")

    # Th√™m n√∫t Reset v√† Th·ª±c hi·ªán PCA v·ªõi icon
    if st.button("üîÑ Reset"):
        st.rerun()

    if st.button("üìä Th·ª±c hi·ªán PCA"):
        # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n
        X, y = make_blobs(n_samples=num_samples, centers=num_clusters, n_features=num_features, random_state=42)

        # Chu·∫©n h√≥a d·ªØ li·ªáu
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # √Åp d·ª•ng PCA
        pca = PCA(n_components=n_components)
        X_pca = pca.fit_transform(X_scaled)

        # V·∫Ω bi·ªÉu ƒë·ªì
        fig = plt.figure(figsize=(12, 6))
        if num_features == 3:
            ax = fig.add_subplot(121, projection='3d')
            ax.scatter(X_scaled[:, 0], X_scaled[:, 1], X_scaled[:, 2], c=y, cmap='viridis', alpha=0.6)
            ax.set_title('D·ªØ li·ªáu ban ƒë·∫ßu (3D)')
            ax.set_xlabel('Feature 1')
            ax.set_ylabel('Feature 2')
            ax.set_zlabel('Feature 3')
        else:
            ax = fig.add_subplot(121)
            scatter = ax.scatter(X_scaled[:, 0], X_scaled[:, 1], c=y, cmap='viridis', alpha=0.6)
            ax.set_title(f'D·ªØ li·ªáu ban ƒë·∫ßu ({num_features}D, ch·ªâ hi·ªÉn th·ªã 2 tr·ª•c)')
            ax.set_xlabel('Feature 1')
            ax.set_ylabel('Feature 2')
            plt.colorbar(scatter, ax=ax, label='Cluster Label')

        ax2 = fig.add_subplot(122)
        if n_components > 1:
            scatter = ax2.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', alpha=0.6)
            ax2.set_xlabel('Principal Component 1')
            ax2.set_ylabel('Principal Component 2')
        else:
            ax2.scatter(X_pca[:, 0], np.zeros_like(X_pca[:, 0]), c=y, cmap='viridis', alpha=0.6)
            ax2.set_xlabel('Principal Component 1')
            ax2.set_yticks([])
        ax2.set_title(f'D·ªØ li·ªáu sau PCA ({n_components}D)')
        plt.colorbar(scatter, ax=ax2, label='Cluster Label')

        st.pyplot(fig)


def ly_thuyet_tSne():
    # Ti√™u ƒë·ªÅ ch√≠nh
    st.title("üî¢ T·ªïng quan v·ªÅ t-SNE")

    st.write("""
    **t-SNE (t-Distributed Stochastic Neighbor Embedding)** l√† m·ªôt thu·∫≠t to√°n **gi·∫£m chi·ªÅu d·ªØ li·ªáu**, 
    gi√∫p **tr·ª±c quan h√≥a d·ªØ li·ªáu cao chi·ªÅu** trong **kh√¥ng gian th·∫•p chi·ªÅu** b·∫±ng c√°ch **b·∫£o to√†n c·∫•u tr√∫c c·ª•c b·ªô** gi·ªØa c√°c ƒëi·ªÉm d·ªØ li·ªáu.
    """)

    # T√≥m t·∫Øt √Ω t∆∞·ªüng
    st.header("üîΩ √ù t∆∞·ªüng ch√≠nh")

    st.markdown("""
    - **M·ª•c ti√™u ch√≠nh**: Gi·∫£m chi·ªÅu d·ªØ li·ªáu t·ª´ kh√¥ng gian cao chi·ªÅu xu·ªëng 2D ho·∫∑c 3D m√† v·∫´n **b·∫£o to√†n c·∫•u tr√∫c c·ª•c b·ªô**.
    - **C√°ch ho·∫°t ƒë·ªông**:
        1. **Chuy·ªÉn ƒë·ªïi kho·∫£ng c√°ch th√†nh x√°c su·∫•t**:
            - Trong **kh√¥ng gian cao chi·ªÅu**, t-SNE s·ª≠ d·ª•ng **ph√¢n ph·ªëi Gaussian** ƒë·ªÉ ƒëo ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa c√°c ƒëi·ªÉm d·ªØ li·ªáu.
            - Trong **kh√¥ng gian th·∫•p chi·ªÅu**, t-SNE s·ª≠ d·ª•ng **ph√¢n ph·ªëi t-Student** ƒë·ªÉ gi·∫£m t√°c ƒë·ªông c·ªßa **outliers**.
        2. **T·ªëi ∆∞u h√≥a b·∫±ng KL-Divergence**:
            - ƒêi·ªÅu ch·ªânh v·ªã tr√≠ c√°c ƒëi·ªÉm trong kh√¥ng gian nh√∫ng sao cho **ph√¢n ph·ªëi x√°c su·∫•t** gi·ªëng nh·∫•t v·ªõi kh√¥ng gian g·ªëc.
            - S·ª≠ d·ª•ng **gradient descent** ƒë·ªÉ c·∫≠p nh·∫≠t t·ªça ƒë·ªô c√°c ƒëi·ªÉm.
    """)

    # Hi·ªÉn th·ªã c√¥ng th·ª©c to√°n h·ªçc
    st.header("üìä C√¥ng th·ª©c To√°n h·ªçc c·ªßa t-SNE")

    st.markdown("**1Ô∏è‚É£ X√°c su·∫•t trong kh√¥ng gian cao chi·ªÅu:**")
    st.latex(r"""
    p_{j|i} = \frac{\exp(-\|x_i - x_j\|^2 / 2\sigma^2)}{\sum_{k \neq i} \exp(-\|x_i - x_k\|^2 / 2\sigma^2)}
    """)
    st.write("""
    - \( \sigma \) l√† ƒë·ªô l·ªách chu·∫©n ƒëi·ªÅu ch·ªânh m·ª©c ƒë·ªô "m·ªü r·ªông" c·ªßa Gaussian.
    - \( p_{j|i} \) l√† x√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán, nghƒ©a l√† m·ª©c ƒë·ªô ƒëi·ªÉm \( x_j \) l√† h√†ng x√≥m c·ªßa \( x_i \).
    """)

    st.markdown("**2Ô∏è‚É£ X√°c su·∫•t trong kh√¥ng gian th·∫•p chi·ªÅu:**")
    st.latex(r"""
    q_{ij} = \frac{(1 + \|y_i - y_j\|^2)^{-1}}{\sum_{k \neq l} (1 + \|y_k - y_l\|^2)^{-1}}
    """)
    st.write("""
    - \( y_i \) l√† ƒëi·ªÉm d·ªØ li·ªáu sau khi chi·∫øu xu·ªëng kh√¥ng gian th·∫•p chi·ªÅu.
    - Ph√¢n ph·ªëi t-Student c√≥ ƒëu√¥i d√†i h∆°n, gi√∫p ngƒÉn vi·ªác outliers ·∫£nh h∆∞·ªüng qu√° m·∫°nh ƒë·∫øn v·ªã tr√≠ c√°c ƒëi·ªÉm.
    """)

    st.markdown("**3Ô∏è‚É£ T·ªëi ∆∞u h√≥a b·∫±ng KL-Divergence:**")
    st.latex(r"""
    KL(P \parallel Q) = \sum_{i \neq j} p_{ij} \log \frac{p_{ij}}{q_{ij}}
    """)
    st.write("""
    - M·ª•c ti√™u c·ªßa t-SNE l√† gi·∫£m thi·ªÉu KL-Divergence b·∫±ng c√°ch s·ª≠ d·ª•ng **gradient descent** ƒë·ªÉ t·ªëi ∆∞u h√≥a v·ªã tr√≠ c√°c ƒëi·ªÉm.
    """)

    st.success("‚úÖ t-SNE gi√∫p tr·ª±c quan h√≥a d·ªØ li·ªáu ph·ª©c t·∫°p m·ªôt c√°ch hi·ªáu qu·∫£!") 

    # Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
    st.title("üìâ Minh h·ªça thu g·ªçn chi·ªÅu b·∫±ng t-SNE")

    # **B∆∞·ªõc 1: Ch·ªçn tham s·ªë cho d·ªØ li·ªáu**
    num_samples = st.slider("S·ªë ƒëi·ªÉm d·ªØ li·ªáu", 100, 1000, 300, step=50, key="num_samples", help="S·ªë l∆∞·ª£ng ƒëi·ªÉm d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c t·∫°o ra cho vi·ªác gi·∫£m chi·ªÅu. TƒÉng s·ªë l∆∞·ª£ng ƒëi·ªÉm c√≥ th·ªÉ l√†m t-SNE ch·∫°y l√¢u h∆°n.")
    num_features = 3  # Hi·ªÉn th·ªã 3D ban ƒë·∫ßu
    num_clusters = st.slider("S·ªë c·ª•m", 2, 5, 3, key="num_clusters", help="S·ªë l∆∞·ª£ng c·ª•m d·ªØ li·ªáu trong kh√¥ng gian ban ƒë·∫ßu. M·ªói c·ª•m ƒë·∫°i di·ªán cho m·ªôt nh√≥m d·ªØ li·ªáu kh√°c nhau.")
    perplexity = st.slider("Perplexity", 5, 50, 30, key="perplexity", help="Tham s·ªë quy·∫øt ƒë·ªãnh c√°ch ph√¢n b·ªë ƒëi·ªÉm trong kh√¥ng gian t-SNE. Gi√° tr·ªã th·∫•p c√≥ th·ªÉ l√†m m·∫•t c·∫•u tr√∫c d·ªØ li·ªáu, trong khi gi√° tr·ªã cao c√≥ th·ªÉ l√†m m·ªù ƒëi c√°c c·ª•m.")

    # **B∆∞·ªõc 2: Th√™m n√∫t Reset ƒë·ªÉ l√†m m·ªõi giao di·ªán**
    if st.button("üîÑ Reset", key="reset_button", help="Nh·∫•n ƒë·ªÉ l√†m m·ªõi to√†n b·ªô giao di·ªán v√† thi·∫øt l·∫≠p l·∫°i c√°c tham s·ªë v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh."):
        st.rerun()

    # **B∆∞·ªõc 3: Nh·∫•n n√∫t ƒë·ªÉ th·ª±c hi·ªán thu·∫≠t to√°n**
    if st.button("üìä Th·ª±c hi·ªán", key="process_button", help="Nh·∫•n ƒë·ªÉ t·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n v√† √°p d·ª•ng t-SNE ƒë·ªÉ gi·∫£m chi·ªÅu xu·ªëng 2D, gi√∫p tr·ª±c quan h√≥a d·ªØ li·ªáu d·ªÖ d√†ng h∆°n."):
        st.write("### üîπ T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p")
        # T·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n v·ªõi s·ªë c·ª•m v√† s·ªë chi·ªÅu ƒë√£ ch·ªçn
        X, y = make_blobs(n_samples=num_samples, centers=num_clusters, n_features=num_features, random_state=42)
        st.write(f"‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu v·ªõi {num_samples} ƒëi·ªÉm, {num_features} chi·ªÅu v√† {num_clusters} c·ª•m.")
        
        # **Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu (3D)**
        st.write("### üîπ D·ªØ li·ªáu ban ƒë·∫ßu (3D)")
        fig = plt.figure(figsize=(10, 4))
        ax = fig.add_subplot(121, projection='3d')
        ax.scatter(X[:, 0], X[:, 1], X[:, 2], c=y, cmap='viridis', edgecolors='k', alpha=0.7)
        ax.set_xlabel("Feature 1")
        ax.set_ylabel("Feature 2")
        ax.set_zlabel("Feature 3")
        ax.set_title("D·ªØ li·ªáu ban ƒë·∫ßu (3D)")
        
        # **Gi·∫£m chi·ªÅu b·∫±ng t-SNE (2D)**
        tsne = TSNE(n_components=2, perplexity=perplexity, random_state=42)
        X_tsne = tsne.fit_transform(X)
        
        ax2 = fig.add_subplot(122)
        scatter = ax2.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y, cmap='viridis', edgecolors='k', alpha=0.7)
        ax2.set_xlabel("t-SNE Component 1")
        ax2.set_ylabel("t-SNE Component 2")
        ax2.set_title("D·ªØ li·ªáu sau t-SNE (2D)")
        plt.colorbar(scatter, label='Cluster Label')
        
        st.pyplot(fig)


def data(): 
    st.title("üìö T·∫≠p D·ªØ Li·ªáu MNIST")
    
    st.markdown("""
    T·∫≠p d·ªØ li·ªáu **MNIST (Modified National Institute of Standards and Technology)** l√† m·ªôt trong nh·ªØng b·ªô d·ªØ li·ªáu n·ªïi b·∫≠t v√† ph·ªï bi·∫øn nh·∫•t trong lƒ©nh v·ª±c h·ªçc m√°y v√† nh·∫≠n d·∫°ng h√¨nh ·∫£nh. ƒê√¢y l√† t·∫≠p d·ªØ li·ªáu bao g·ªìm c√°c h√¨nh ·∫£nh c·ªßa c√°c ch·ªØ s·ªë vi·∫øt tay t·ª´ 0 ƒë·∫øn 9, ƒë∆∞·ª£c thu th·∫≠p ƒë·ªÉ th·ª≠ nghi·ªám c√°c thu·∫≠t to√°n ph√¢n lo·∫°i v√† nh·∫≠n d·∫°ng m·∫´u.
    
    ![Mnist-dataset](https://datasets.activeloop.ai/wp-content/uploads/2019/12/MNIST-handwritten-digits-dataset-visualized-by-Activeloop.webp)
                               

    ## 1. T·ªïng Quan v·ªÅ MNIST:
    MNIST g·ªìm hai ph·∫ßn ch√≠nh:
    
    - **D·ªØ li·ªáu hu·∫•n luy·ªán (Training Set)**: G·ªìm 60.000 h√¨nh ·∫£nh.
    - **D·ªØ li·ªáu ki·ªÉm tra (Test Set)**: G·ªìm 10.000 h√¨nh ·∫£nh.
    
    M·ªói h√¨nh ·∫£nh trong b·ªô d·ªØ li·ªáu c√≥ k√≠ch th∆∞·ªõc l√† 28x28 pixel v√† bi·ªÉu di·ªÖn m·ªôt trong 10 ch·ªØ s·ªë (0 ƒë·∫øn 9). D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a, v·ªõi c√°c h√¨nh ·∫£nh ƒë∆∞·ª£c cƒÉn ch·ªânh v√† c√≥ n·ªÅn tr·∫Øng, gi√∫p vi·ªác x·ª≠ l√Ω tr·ªü n√™n ƒë∆°n gi·∫£n h∆°n.
    
    ## 2. M·ª•c Ti√™u S·ª≠ D·ª•ng T·∫≠p D·ªØ Li·ªáu MNIST:
    MNIST ch·ªß y·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán v√† ki·ªÉm tra c√°c thu·∫≠t to√°n ph√¢n lo·∫°i. C√°c m·ª•c ti√™u ch√≠nh khi l√†m vi·ªác v·ªõi MNIST bao g·ªìm:
    
    - **Ph√¢n lo·∫°i ch·ªØ s·ªë vi·∫øt tay**: D·ª± ƒëo√°n ch·ªØ s·ªë t∆∞∆°ng ·ª©ng v·ªõi m·ªói h√¨nh ·∫£nh.
    - **Ki·ªÉm th·ª≠ m√¥ h√¨nh h·ªçc m√°y**: ƒê∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra hi·ªáu qu·∫£ c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y, t·ª´ c√°c thu·∫≠t to√°n c·ªï ƒëi·ªÉn nh∆∞ K-Nearest Neighbors (KNN), Support Vector Machines (SVM) ƒë·∫øn c√°c m√¥ h√¨nh h·ªçc s√¢u nh∆∞ m·∫°ng n∆°-ron t√≠ch ch·∫≠p (CNN).
    - **Ti·ªÅn x·ª≠ l√Ω v√† h·ªçc m√°y c∆° b·∫£n**: ƒê√¢y l√† m·ªôt b·ªô d·ªØ li·ªáu tuy·ªát v·ªùi ƒë·ªÉ hi·ªÉu r√µ c√°c quy tr√¨nh ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu v√† c√°ch th·ª©c ho·∫°t ƒë·ªông c·ªßa c√°c m√¥ h√¨nh ph√¢n lo·∫°i.
    
    ## 3. C·∫•u Tr√∫c D·ªØ Li·ªáu MNIST:
    M·ªói h√¨nh ·∫£nh trong b·ªô d·ªØ li·ªáu MNIST c√≥ k√≠ch th∆∞·ªõc 28x28 pixel, t·ª©c l√† m·ªói h√¨nh ·∫£nh s·∫Ω c√≥ 784 gi√° tr·ªã s·ªë nguy√™n, t∆∞∆°ng ·ª©ng v·ªõi ƒë·ªô s√°ng c·ªßa t·ª´ng pixel. T·∫•t c·∫£ c√°c gi√° tr·ªã n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh. D·ªØ li·ªáu n√†y c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c t√°c v·ª• nh∆∞:
    
    - **Ph√¢n lo·∫°i h√¨nh ·∫£nh**: C√°c m√¥ h√¨nh h·ªçc m√°y c√≥ th·ªÉ h·ªçc c√°ch ph√¢n lo·∫°i c√°c h√¨nh ·∫£nh th√†nh c√°c nh√≥m ch·ªØ s·ªë t·ª´ 0 ƒë·∫øn 9.
    - **Ti·ªÅn x·ª≠ l√Ω h√¨nh ·∫£nh**: Vi·ªác chu·∫©n h√≥a d·ªØ li·ªáu v√† √°p d·ª•ng c√°c k·ªπ thu·∫≠t ti·ªÅn x·ª≠ l√Ω gi√∫p c·∫£i thi·ªán hi·ªáu qu·∫£ c·ªßa m√¥ h√¨nh.
    
    ## 4. ·ª®ng D·ª•ng C·ªßa T·∫≠p D·ªØ Li·ªáu MNIST:
    - **Nh·∫≠n d·∫°ng ch·ªØ vi·∫øt tay**: ƒê√¢y l√† ·ª©ng d·ª•ng ph·ªï bi·∫øn nh·∫•t c·ªßa MNIST.
    - **H·ªçc s√¢u v√† ph√¢n lo·∫°i h√¨nh ·∫£nh**: C√°c m√¥ h√¨nh h·ªçc s√¢u, ƒë·∫∑c bi·ªát l√† m·∫°ng n∆°-ron t√≠ch ch·∫≠p, ƒë∆∞·ª£c hu·∫•n luy·ªán v·ªõi b·ªô d·ªØ li·ªáu n√†y ƒë·ªÉ ph√¢n lo·∫°i ch·ªØ s·ªë.
    """)


def train_model():
    st.title("üìâ Gi·∫£m chi·ªÅu d·ªØ li·ªáu MNIST v·ªõi PCA & t-SNE")
    
    mlflow_input()

    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if "run_name" not in st.session_state:
        st.session_state["run_name"] = "default_run"
    if "mlflow_url" not in st.session_state:
        st.session_state["mlflow_url"] = ""

    # Load d·ªØ li·ªáu
    Xmt = np.load("X.npy")
    ymt = np.load("y.npy")
    X = Xmt.reshape(Xmt.shape[0], -1) 
    y = ymt.reshape(-1) 

    # T√πy ch·ªçn thu·∫≠t to√°n
    method = st.radio("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu", ["PCA", "t-SNE"], 
                      help="Ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu d·ªØ li·ªáu: PCA gi√∫p gi·∫£m chi·ªÅu b·∫±ng c√°ch gi·ªØ l·∫°i ph∆∞∆°ng sai l·ªõn nh·∫•t, trong khi t-SNE gi√∫p nh√∫ng d·ªØ li·ªáu v√†o kh√¥ng gian c√≥ s·ªë chi·ªÅu th·∫•p h∆°n d·ª±a tr√™n x√°c su·∫•t t∆∞∆°ng ƒë·ªìng.")
    n_components = st.slider("Ch·ªçn s·ªë chi·ªÅu gi·∫£m xu·ªëng", 2, 50, 2, 
                             help="S·ªë chi·ªÅu ƒë·∫ßu ra c·ªßa d·ªØ li·ªáu sau khi gi·∫£m chi·ªÅu. Gi√° tr·ªã n√†y quy·∫øt ƒë·ªãnh s·ªë l∆∞·ª£ng th√†nh ph·∫ßn gi·ªØ l·∫°i trong d·ªØ li·ªáu sau khi √°p d·ª•ng ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu.")

    # Ch·ªçn c√°ch tr·ª±c quan h√≥a
    visualization_dim = st.radio("Ch·ªçn c√°ch tr·ª±c quan h√≥a", ["2D", "3D"], 
                                 help="Ch·ªçn c√°ch hi·ªÉn th·ªã d·ªØ li·ªáu sau khi gi·∫£m chi·ªÅu. 2D hi·ªÉn th·ªã tr√™n m·∫∑t ph·∫≥ng, 3D hi·ªÉn th·ªã tr√™n kh√¥ng gian ba chi·ªÅu.")
    
    # N·∫øu ch·ªçn t-SNE, th√™m t√πy ch·ªçn Perplexity
    perplexity = 30
    if method == "t-SNE":
        perplexity = st.slider("Ch·ªçn Perplexity", 5, 50, 30, step=5, 
                               help="Perplexity l√† tham s·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch t-SNE c√¢n b·∫±ng gi·ªØa c·∫•u tr√∫c c·ª•c b·ªô v√† to√†n c·ª•c. Gi√° tr·ªã th·∫•p gi√∫p b·∫£o to√†n c√°c c·ª•m nh·ªè, gi√° tr·ªã cao gi√∫p ph·∫£n √°nh c·∫•u tr√∫c t·ªïng th·ªÉ.")

    # Thanh tr∆∞·ª£t ch·ªçn s·ªë l∆∞·ª£ng m·∫´u s·ª≠ d·ª•ng t·ª´ MNIST
    num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng m·∫´u MNIST s·ª≠ d·ª•ng:", min_value=1000, max_value=60000, value=5000, step=1000, 
                            help="S·ªë l∆∞·ª£ng m·∫´u d·ªØ li·ªáu t·ª´ t·∫≠p MNIST s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ hu·∫•n luy·ªán. S·ªë m·∫´u l·ªõn gi√∫p c·∫£i thi·ªán k·∫øt qu·∫£ nh∆∞ng c√≥ th·ªÉ l√†m tƒÉng th·ªùi gian x·ª≠ l√Ω.")

    # Gi·ªõi h·∫°n s·ªë m·∫´u ƒë·ªÉ tƒÉng t·ªëc
    X_subset, y_subset = X[:num_samples], y[:num_samples]

    if st.button("üöÄ Ch·∫°y gi·∫£m chi·ªÅu"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            mlflow.start_run(run_name=st.session_state["run_name"])
            mlflow.log_param("method", method)
            mlflow.log_param("n_components", n_components)
            mlflow.log_param("num_samples", num_samples)
            mlflow.log_param("original_dim", X.shape[1])

            if method == "t-SNE":
                mlflow.log_param("perplexity", perplexity)
                reducer = TSNE(n_components=n_components, perplexity=perplexity, random_state=42)
            else:
                reducer = PCA(n_components=n_components)

            start_time = time.time()
            X_reduced = reducer.fit_transform(X_subset)
            elapsed_time = time.time() - start_time
            mlflow.log_metric("elapsed_time", elapsed_time)

            if method == "PCA":
                explained_variance = np.sum(reducer.explained_variance_ratio_)
                mlflow.log_metric("explained_variance_ratio", explained_variance)
            elif method == "t-SNE" and hasattr(reducer, "kl_divergence_"):
                mlflow.log_metric("KL_divergence", reducer.kl_divergence_)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if visualization_dim == "2D" and n_components >= 2:
                fig = px.scatter(x=X_reduced[:, 0], y=X_reduced[:, 1], color=y_subset.astype(str),
                                 title=f"{method} gi·∫£m chi·ªÅu xu·ªëng {n_components}D",
                                 labels={'x': "Th√†nh ph·∫ßn 1", 'y': "Th√†nh ph·∫ßn 2"})
                st.plotly_chart(fig)
            elif visualization_dim == "3D" and n_components >= 3:
                fig = px.scatter_3d(x=X_reduced[:, 0], y=X_reduced[:, 1], z=X_reduced[:, 2],
                                     color=y_subset.astype(str),
                                     title=f"{method} gi·∫£m chi·ªÅu xu·ªëng {n_components}D",
                                     labels={'x': "Th√†nh ph·∫ßn 1", 'y': "Th√†nh ph·∫ßn 2", 'z': "Th√†nh ph·∫ßn 3"})
                st.plotly_chart(fig)
            else:
                st.warning(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã tr·ª±c quan v·ªõi {visualization_dim} khi s·ªë chi·ªÅu = {n_components}!")

            # L∆∞u k·∫øt qu·∫£ v√†o MLflow
            os.makedirs("logs", exist_ok=True)
            np.save(f"logs/{method}_X_reduced.npy", X_reduced)
            mlflow.log_artifact(f"logs/{method}_X_reduced.npy")

            mlflow.end_run()
            st.success(f"‚úÖ ƒê√£ log d·ªØ li·ªáu cho **Train_{st.session_state['run_name']}**!")

            if st.session_state["mlflow_url"]:
                st.markdown(f"### üîó [Truy c·∫≠p MLflow]({st.session_state['mlflow_url']})")
            else:
                st.warning("‚ö†Ô∏è Ch∆∞a c√≥ ƒë∆∞·ªùng link MLflow!")

            st.success("Ho√†n th√†nh!")


def mlflow_input():
    #st.title("üöÄ MLflow DAGsHub Tracking v·ªõi Streamlit")
    DAGSHUB_USERNAME = "Snxtruc"  # Thay b·∫±ng username c·ªßa b·∫°n
    DAGSHUB_REPO_NAME = "HocMayPython"
    DAGSHUB_TOKEN = "ca4b78ae4dd9d511c1e0c333e3b709b2cd789a19"  # Thay b·∫±ng Access Token c·ªßa b·∫°n

    # ƒê·∫∑t URI MLflow ƒë·ªÉ tr·ªè ƒë·∫øn DagsHub
    mlflow.set_tracking_uri(f"https://dagshub.com/{DAGSHUB_USERNAME}/{DAGSHUB_REPO_NAME}.mlflow")

    # Thi·∫øt l·∫≠p authentication b·∫±ng Access Token
    os.environ["MLFLOW_TRACKING_USERNAME"] = DAGSHUB_USERNAME
    os.environ["MLFLOW_TRACKING_PASSWORD"] = DAGSHUB_TOKEN

    # ƒê·∫∑t th√≠ nghi·ªám MLflow
    mlflow.set_experiment("PCA & t-SNE")   

    st.session_state['mlflow_url'] = f"https://dagshub.com/{DAGSHUB_USERNAME}/{DAGSHUB_REPO_NAME}.mlflow"


def display_mlflow_experiments():
    try:
        st.title("üîç Qu·∫£n l√Ω MLflow Experiments")

        # K·∫øt n·ªëi MlflowClient
        client = MlflowClient()

        # L·∫•y danh s√°ch th√≠ nghi·ªám
        experiments = mlflow.search_experiments()
        
        if experiments:
            st.write("### üìå Danh s√°ch Th√≠ nghi·ªám")
            experiment_data = [
                {"Experiment ID": exp.experiment_id, "Experiment Name": exp.name, "Artifact Location": exp.artifact_location}
                for exp in experiments
            ]
            st.data_editor(pd.DataFrame(experiment_data))
            
            # Ch·ªçn th√≠ nghi·ªám
            selected_exp_id = st.selectbox("üóÇ Ch·ªçn th√≠ nghi·ªám", sorted([exp.experiment_id for exp in experiments]))
            
            # ƒê·ªïi t√™n th√≠ nghi·ªám
            new_exp_name = st.text_input("‚úèÔ∏è Nh·∫≠p t√™n m·ªõi cho th√≠ nghi·ªám", "")
            if st.button("üíæ ƒê·ªïi t√™n") and new_exp_name:
                client.rename_experiment(selected_exp_id, new_exp_name)
                st.success("‚úÖ ƒê·ªïi t√™n th√†nh c√¥ng! Vui l√≤ng t·∫£i l·∫°i trang.")
            
            # X√≥a th√≠ nghi·ªám
            if st.button("üóëÔ∏è X√≥a th√≠ nghi·ªám"):
                client.delete_experiment(selected_exp_id)
                st.success("‚úÖ X√≥a th√≠ nghi·ªám th√†nh c√¥ng! Vui l√≤ng t·∫£i l·∫°i trang.")
            
            # L·∫•y danh s√°ch runs trong th√≠ nghi·ªám ƒë√£ ch·ªçn
            runs = client.search_runs(experiment_ids=[selected_exp_id])
            if runs:
                st.write("### üìå Danh s√°ch Run")
                
                # B·ªô l·ªçc t√¨m ki·∫øm Run
                search_term = st.text_input("üîç T√¨m ki·∫øm Run", "")
                
                # B·ªô l·ªçc theo kho·∫£ng th·ªùi gian
                start_date = st.date_input("üìÖ Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu", pd.to_datetime("2023-01-01"))
                end_date = st.date_input("üìÖ Ch·ªçn ng√†y k·∫øt th√∫c", pd.to_datetime("today"))
                
                # B·ªô l·ªçc theo tr·∫°ng th√°i Run
                status_filter = st.multiselect("üìå L·ªçc theo tr·∫°ng th√°i", ["RUNNING", "FINISHED", "FAILED", "KILLED"], default=["RUNNING", "FINISHED"])
                
                # Hi·ªÉn th·ªã danh s√°ch Runs
                run_data = [
                    {
                        "Run ID": run.info.run_id,
                        "Run Name": run.data.tags.get("mlflow.runName", "Unnamed"),
                        "Start Time": pd.to_datetime(run.info.start_time, unit='ms'),
                        "End Time": pd.to_datetime(run.info.end_time, unit='ms') if run.info.end_time else None,
                        "Duration": (pd.to_datetime(run.info.end_time, unit='ms') - pd.to_datetime(run.info.start_time, unit='ms')).total_seconds() if run.info.end_time else None,
                        "Status": run.info.status,
                        "Source": run.data.tags.get("mlflow.source.name", "Unknown"),
                        "Metrics": run.data.metrics
                    }
                    for run in runs
                ]
                df_runs = pd.DataFrame(run_data).sort_values(by="Start Time", ascending=False)
                
                # √Åp d·ª•ng b·ªô l·ªçc
                df_runs = df_runs[(df_runs["Start Time"] >= pd.to_datetime(start_date)) & (df_runs["Start Time"] <= pd.to_datetime(end_date))]
                df_runs = df_runs[df_runs["Status"].isin(status_filter)]
                
                if search_term:
                    df_runs = df_runs[df_runs["Run Name"].str.contains(search_term, case=False, na=False)]
                
                # B·ªô l·ªçc theo Metrics c·ª• th·ªÉ
                metric_name = st.text_input("üìä Nh·∫≠p t√™n Metric ƒë·ªÉ l·ªçc", "accuracy")
                metric_value = st.number_input("üìà Gi√° tr·ªã t·ªëi thi·ªÉu c·ªßa Metric", min_value=0.0, step=0.01, format="%.2f")
                
                def filter_by_metric(run):
                    return metric_name in run["Metrics"] and run["Metrics"][metric_name] >= metric_value
                
                df_runs = df_runs[df_runs.apply(filter_by_metric, axis=1)]
                
                st.data_editor(df_runs)
                
                run_options = {run["Run ID"]: f"{run['Run Name']} - {run['Run ID']}" for _, run in df_runs.iterrows()}
                        
                # Ch·ªçn Run trong th√≠ nghi·ªám ƒë·ªÉ ƒë·ªïi t√™n ho·∫∑c x√≥a
                runs = client.search_runs(experiment_ids=[selected_exp_id])
                if runs:
                    run_options = {run.info.run_id: f"{run.data.tags.get('mlflow.runName', 'Unnamed')} - {run.info.run_id}" for run in runs}
                    selected_run_id = st.selectbox("‚úèÔ∏è Ch·ªçn Run ƒë·ªÉ ƒë·ªïi t√™n", list(run_options.keys()), format_func=lambda x: run_options[x])
                    new_run_name = st.text_input("üìõ Nh·∫≠p t√™n m·ªõi cho Run", "")
                    if st.button("‚úÖ C·∫≠p nh·∫≠t t√™n Run") and new_run_name:
                        client.set_tag(selected_run_id, "mlflow.runName", new_run_name)
                        st.success("‚úÖ C·∫≠p nh·∫≠t t√™n Run th√†nh c√¥ng! Vui l√≤ng t·∫£i l·∫°i trang.")
                    
                    selected_run_id_delete = st.selectbox("üóëÔ∏è Ch·ªçn Run ƒë·ªÉ x√≥a", list(run_options.keys()), format_func=lambda x: run_options[x])
                    if st.button("‚ùå X√≥a Run"):
                        client.delete_run(selected_run_id_delete)
                        st.success("‚úÖ X√≥a Run th√†nh c√¥ng! Vui l√≤ng t·∫£i l·∫°i trang.")
                    

                # Ch·ªçn Run ƒë·ªÉ xem chi ti·∫øt
                selected_run_id = st.selectbox("üîç Ch·ªçn Run ƒë·ªÉ xem chi ti·∫øt", list(run_options.keys()), format_func=lambda x: run_options[x])
                selected_run = client.get_run(selected_run_id)
                
                st.write("### üìã Th√¥ng tin Run")
                st.write(f"**Run ID:** {selected_run_id}")
                st.write(f"**Run Name:** {selected_run.data.tags.get('mlflow.runName', 'Unnamed')}")
                st.write(f"**Start Time:** {pd.to_datetime(selected_run.info.start_time, unit='ms')}")
                st.write(f"**End Time:** {pd.to_datetime(selected_run.info.end_time, unit='ms') if selected_run.info.end_time else 'N/A'}")
                st.write(f"**Duration:** {(pd.to_datetime(selected_run.info.end_time, unit='ms') - pd.to_datetime(selected_run.info.start_time, unit='ms')).total_seconds() if selected_run.info.end_time else 'N/A'} seconds")
                st.write(f"**Status:** {selected_run.info.status}")
                st.write(f"**Source:** {selected_run.data.tags.get('mlflow.source.name', 'Unknown')}")
                
                # Hi·ªÉn th·ªã Metrics
                st.write("### üìä Metrics")
                metrics = selected_run.data.metrics
                if metrics:
                    df_metrics = pd.DataFrame(metrics.items(), columns=["Metric Name", "Value"])
                    st.data_editor(df_metrics)
                else:
                    st.write("üì≠ Kh√¥ng c√≥ Metrics n√†o.")
                
                # Hi·ªÉn th·ªã Artifacts
                artifact_uri = selected_run.info.artifact_uri
                st.write(f"**Artifact Location:** {artifact_uri}")
                
                st.write("### üìÇ Danh s√°ch Artifacts")
                artifacts = client.list_artifacts(selected_run_id)
                if artifacts:
                    artifact_paths = [artifact.path for artifact in artifacts]
                    st.write(artifact_paths)
                    for artifact in artifacts:
                        if artifact.path.endswith(".png") or artifact.path.endswith(".jpg"):
                            st.image(f"{artifact_uri}/{artifact.path}", caption=artifact.path)
                        if artifact.path.endswith(".csv") or artifact.path.endswith(".txt"):
                            with open(f"{artifact_uri}/{artifact.path}", "r") as f:
                                st.download_button(label=f"üì• T·∫£i {artifact.path}", data=f.read(), file_name=artifact.path)
                else:
                    st.write("üì≠ Kh√¥ng c√≥ artifacts n√†o.")
                
                # Truy c·∫≠p MLflow UI
                st.write("### üîó Truy c·∫≠p MLflow UI")
                st.markdown("[M·ªü MLflow UI](https://dagshub.com/Snxtruc/HocMayVoiPython.mlflow)")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ Run n√†o trong th√≠ nghi·ªám n√†y.")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ Th√≠ nghi·ªám n√†o ƒë∆∞·ª£c t√¨m th·∫•y.")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y danh s√°ch th√≠ nghi·ªám: {e}")


def PCA_T_sne():
    # Thi·∫øt l·∫≠p CSS ƒë·ªÉ h·ªó tr·ª£ hi·ªÉn th·ªã tabs v·ªõi hi·ªáu ·ª©ng hover v√† thanh cu·ªôn
    st.markdown(
        """
        <style>
        .stTabs [role="tablist"] {
            overflow-x: auto;
            white-space: nowrap;
            display: flex;
            scrollbar-width: thin;
            scrollbar-color: #888 #f0f0f0;
        }
        .stTabs [role="tablist"]::-webkit-scrollbar {
            height: 6px;
        }
        .stTabs [role="tablist"]::-webkit-scrollbar-thumb {
            background-color: #888;
            border-radius: 3px;
        }
        .stTabs [role="tablist"]::-webkit-scrollbar-track {
            background: #f0f0f0;
        }
        .stTabs [role="tab"]:hover {
            background-color: #f0f0f0;
            transition: background-color 0.3s ease-in-out;
        }
        </style>
        """,
        unsafe_allow_html=True
    ) 


    st.title("üñäÔ∏è MNIST PCA & t-SNE App")

    # Ensure the tab names are properly separated
    tab1, tab2, tab3, tab4, tab5= st.tabs([
    "üìò L√Ω thuy·∫øt PCA", 
    "üìò L√Ω thuy·∫øt T-sne", 
    "üìò Review database",  
    "üîÄ Gi·∫£m chi·ªÅu",
    " üöÄ Th√¥ng tin thu g·ªçn chi·ªÅu"
    ])

    with tab1: 
        ly_thuyet_PCA() 

    with tab2:
        ly_thuyet_tSne()

    with tab3: 
        data()    

    with tab4:
        train_model()
    with tab5: 
        display_mlflow_experiments()    

def run(): 
    PCA_T_sne()        

if __name__ == "__main__":
    run()
